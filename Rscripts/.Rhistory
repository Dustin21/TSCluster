install.packages("e1071")
?e1071::cmeans
cl <- e1071::cmeans(t(embed_map$coords), centers = 5)
cl
cl$membership
cl$centers
str(cl)
as.integer(cl)
cl$membership
str(cl)
cl$cluster
plot_ly(data = data.frame(cl$cluster, out), x = ~X1, y = ~X2,
type="scatter", mode = "markers" , color = ~as.factor(cl.cluster),
marker = list(size = 1))
cl <- e1071::cmeans(t(embed_map$coords), centers = 10)
plot_ly(data = data.frame(cl$cluster, out), x = ~X1, y = ~X2,
type="scatter", mode = "markers" , color = ~as.factor(cl.cluster),
marker = list(size = 1))
cl <- e1071::cmeans(t(embed_map$coords), centers = 15)
plot_ly(data = data.frame(cl$cluster, out), x = ~X1, y = ~X2,
type="scatter", mode = "markers" , color = ~as.factor(cl.cluster),
marker = list(size = 1))
cl <- e1071::cmeans(t(embed_map$coords), centers = 30)
cl
plot_ly(data = data.frame(cl$cluster, out), x = ~X1, y = ~X2,
type="scatter", mode = "markers" , color = ~as.factor(cl.cluster),
marker = list(size = 1))
setwd("C:/Users/dustin.johnson/PycharmProjects/PowerfulInsightEngine/Rscripts")
optClust <- function(x, k)
{
for(i in k)
{
print(i)
}
}
optClust(1, k=c(1,2,3,4))
seq_along(l)
seq_along(k)
k
k=c(1,2,3,4)
seq_along(k)
install.packages("diceR")
devtools::install_github("AlineTalhouk/diceR")
install.packages("devtools")
devtools::install_github("AlineTalhouk/diceR")
devtools::install_github("AlineTalhouk/diceR")
install.packages("Rcpp")
install.packages("Rcpp")
devtools::install_github("AlineTalhouk/diceR")
coords <- data.frame(t(embed_map$coords))
consensus <- diceR::consensus_cluster(coords, nk = 4:25, reps = 1,
algorithms = "cmeans", p.item = 0.8)
mod.labs <- list(list())
mod.labs
mod.labs[[1]][[1]] <- 5
mod.labs[[1]][[2]] <- 5
mod.labs
mod.labs[[1, 1]] <- 2
mod.labs <- list()
mod.labs[[1]][[1]] <- 5
head(coords)
sample_n(coords, 5)
dplyr::sample_n(coords, 5)
dplyr::sample_n(coords, 5) -> aa
mod.fit <- e1071::cmeans(aa, 2)
mod.fit
mod.fit$cluster
install.packages("factoextra")
mod.fit$centers
mod.fit$withinerror
wss.plot <- function(x, nc, seed = 123)
{
wss <- (nrow(x)-1)*sum(apply(x,2,var))
for(i in seq_along(nc))
{
set.seed(seed)
wss[i] <- sum(cmeans(x, centers = i)$withinerror)
}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
wss.plot(coords, nc=4:15)
wss.plot <- function(x, nc, seed = 123)
{
wss <- (nrow(x)-1)*sum(apply(x,2,var))
for(i in seq_along(nc))
{
set.seed(seed)
wss[i] <- sum(e1071::cmeans(x, centers = i)$withinerror)
}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
wss.plot(coords, nc=4:15)
dim(x)
dim(coords)
wss.plot <- function(x, nc, seed = 123)
{
wss <- (nrow(x) - 1) * sum(apply(x, 2, var))
for(i in seq_along(nc))
{
set.seed(seed)
wss[i] <- sum(e1071::cmeans(x, centers = i)$withinerror)
}
plot(nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
wss.plot(coords, 4:15)
apply(coords, 2, var)
(nrow(x) - 1) * sum(apply(x, 2, var))
x <- coords
(nrow(x) - 1) * sum(apply(x, 2, var))
wss.plot <- function(x, nc, seed = 123)
{
wss <- (nrow(x) - 1) * sum(apply(x, 2, var))
for(i in seq_along(nc))
{
set.seed(seed)
wss[i] <- sum(e1071::cmeans(x, centers = i)$withinerror)
}
plot(nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
wss.plot
wss.plot(x = coords, nc = 4:10, seed = 123)
seq_along(2:10)
e1071::cmeans(coords, 4)
e1071::cmeans(coords, 4)$withinerror
e1071::cmeans(coords, 4) -> aa
aa %>% str
str(aa)
sum(1)
wss.plot <- function(x, nc, seed = 123)
{
wss <- (nrow(x) - 1) * sum(apply(x, 2, var))
for(i in seq_along(nc))
{
set.seed(seed)
wss[i] <- e1071::cmeans(x, centers = i)$withinerror
}
plot(nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
wss.plot(coords, 3:5)
dim(x)
?e1071::cmeans
wss <- (nrow(x) - 1) * sum(apply(x, 2, var))
for(i in seq_along(nc))
{
set.seed(seed)
wss[i] <- e1071::cmeans(x, centers = i)$withinerror
}
nc <- 2:4
wss
for(i in seq_along(nc))
{
set.seed(seed)
wss[i] <- e1071::cmeans(x, centers = i)$withinerror
}
seed <- 123
for(i in seq_along(nc))
{
set.seed(seed)
wss[i] <- e1071::cmeans(x, centers = i)$withinerror
}
e1071::cmeans(x, centers = i)$withinerror
str(x)
i
nc
wss.plot <- function(x, nc, seed = 123)
{
wss <- (nrow(x) - 1) * sum(apply(x, 2, var))
for(i in nc)
{
set.seed(seed)
wss[i] <- e1071::cmeans(x, centers = i)$withinerror
}
plot(nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
wss.plot(coords, 3:5)
ww
wss
(nrow(data)-1)*sum(apply(data,2,var))
sum(apply(x, 2, var))
(nrow(x) - 1)
apply(x, 2, var)
wss.plot <- function(x, nc, seed = 123)
{
wss <- NULL
wss <- (nrow(x) - 1) * sum(apply(x, 2, var))
for(i in nc)
{
set.seed(seed)
wss[i] <- e1071::cmeans(x, centers = i)$withinerror
}
plot(nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
wss.plot <- function(x, nc, seed = 123)
{
wss <- NULL
wss[1] <- (nrow(x) - 1) * sum(apply(x, 2, var))
for(i in seq_along(nc))
{
set.seed(seed)
wss[i] <- e1071::cmeans(x, centers = nc[i])$withinerror
}
plot(nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
wss.plot(coords, 3:5)
wss.plot(coords, 3:20)
wss.plot(coords, 3:30)
?e1071::cmeans
cl
cl$cluster
anova(data.frame(cl$cluster, coords)
)
anova(cl$cluster, coords)
anova(cbind(cl$cluster, coords))
?anova
install.packages(clusterSim)
install.packages("clusterSim")
aa <- clusterSim::index.G1(coords, cl$cluster)
aa
wss.plot <- function(x, nc, seed = 123)
{
wss <- NULL
for(i in seq_along(nc))
{
set.seed(seed)
clst <- e1071::cmeans(x, centers = nc[i])$cluster
wss[i] <- clusterSim::index.G1(coords, clst)
}
plot(nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
wss.plot(coords, 3:5)
wss.plot(coords, 3:10)
wss.plot(coords, 2:20)
library(clusterSim)
data(data_ratio)
md <- dist(data_ratio, method="euclidean")
# nc - number_of_clusters
min_nc=2
max_nc=20
res <- array(0,c(max_nc-min_nc+1,2))
res[,1] <- min_nc:max_nc
clusters <- NULL
for (nc in min_nc:max_nc)
{
cl2 <- pam(md, nc, diss=TRUE)
res[nc-min_nc+1,2] <- G1 <- index.G1(data_ratio,cl2$cluster,centrotypes="centroids")
clusters <- rbind(clusters, cl2$cluster)
}
print(paste("max G1 for",(min_nc:max_nc)[which.max(res[,2])],"clusters=",max(res[,2])))
print("clustering for max G1")
print(clusters[which.max(res[,2]),])
write.table(res,file="G1_res.csv",sep=";",dec=",",row.names=TRUE,col.names=FALSE)
plot(res, type="p", pch=0, xlab="Number of clusters", ylab="G1", xaxt="n")
axis(1, c(min_nc:max_nc))
wss.plot(coords, 2:50)
wss.plot <- function(x, nc, boot.n = 5, boot.p = 0.8, seed = 123)
{
fstat <- NULL
boots.mat <- matrix(NA, nrow = boot.p * nrow(x), ncol = boot.n)
for(b in 1:boot.n)
{
for(i in seq_along(nc))
{
set.seed(seed)
boot <- dplyr::sample_n(x, boot.p * nrow(x))
clst <- e1071::cmeans(boot, centers = nc[i])$cluster
fstat[i] <- clusterSim::index.G1(coords, clst)
}
boots.mat[,b] <- fstat
}
plot(nc, boots.mat[,1], type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
for(i in 2:ncol(boots.mat))
{
lines(nc, boots.mat[,i], type = 'l', col=i)
}
}
wss.plot(coords, nc=3:5)
boots.mat
wss.plot <- function(x, nc, boot.n = 5, boot.p = 0.8, seed = 123)
{
fstat <- NULL
boots.mat <- matrix(NA, nrow = boot.p * nrow(x), ncol = boot.n)
for(b in 1:boot.n)
{
for(i in seq_along(nc))
{
set.seed(seed)
boot <- dplyr::sample_n(x, boot.p * nrow(x))
clst <- e1071::cmeans(boot, centers = nc[i])$cluster
fstat[i] <- clusterSim::index.G1(coords, clst)
}
boots.mat[,b] <- fstat
}
}
wss.plot(coords, nc=3:5)
wss.plot <- function(x, nc, boot.n = 5, boot.p = 0.8, seed = 123)
{
fstat <- NULL
boots.mat <- matrix(NA, nrow = boot.p * nrow(x), ncol = boot.n)
for(b in 1:boot.n)
{
for(i in seq_along(nc))
{
set.seed(seed)
boot <- dplyr::sample_n(x, boot.p * nrow(x))
clst <- e1071::cmeans(boot, centers = nc[i])$cluster
fstat[i] <- clusterSim::index.G1(coords, clst)
}
boots.mat[,b] <- fstat
}
return(boots.mat)
}
wss.plot(coords, nc=3:5)
nc <- 3:5
plot(nc, boots.mat[,1], type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
wss.plot(coords, nc=3:5) -> aa
plot(nc, aa[,1], type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
head(aa)
dim(aa)
nc
wss.plot <- function(x, nc, boot.n = 5, boot.p = 0.8, seed = 123)
{
set.seed(seed)
fstat <- NULL
boots.mat <- matrix(NA, nrow = boot.n, ncol = length(nc))
for(b in 1:boot.n)
{
boot <- dplyr::sample_n(x, boot.p * nrow(x))
for(i in seq_along(nc))
{
clst <- e1071::cmeans(boot, centers = nc[i])$cluster
fstat[i] <- clusterSim::index.G1(coords, clst)
}
boots.mat[b,] <- fstat
}
plot(nc, boots.mat[1,], type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
for(i in 2:nrows(boots.mat))
{
lines(nc, boots.mat[i,], type = 'l', col=i)
}
return(boots.mat)
}
wss.plot(coords, nc=3:5) -> aa
aa
wss.plot <- function(x, nc, boot.n = 5, boot.p = 0.8, seed = 123)
{
set.seed(seed)
fstat <- NULL
boots.mat <- matrix(NA, nrow = boot.n, ncol = length(nc))
for(b in 1:boot.n)
{
boot <- dplyr::sample_n(x, boot.p * nrow(x))
for(i in seq_along(nc))
{
clst <- e1071::cmeans(boot, centers = nc[i])$cluster
boots.mat[b,i] <- clusterSim::index.G1(boot, clst)
}
}
plot(nc, boots.mat[1,], type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
for(i in 2:nrows(boots.mat))
{
lines(nc, boots.mat[i,], type = 'l', col=i)
}
return(boots.mat)
}
wss.plot(coords, nc=3:5) -> aa
wss.plot <- function(x, nc, boot.n = 5, boot.p = 0.8, seed = 123)
{
set.seed(seed)
fstat <- NULL
boots.mat <- matrix(NA, nrow = boot.n, ncol = length(nc))
for(b in 1:boot.n)
{
boot <- dplyr::sample_n(x, boot.p * nrow(x))
for(i in seq_along(nc))
{
clst <- e1071::cmeans(boot, centers = nc[i])$cluster
boots.mat[b,i] <- clusterSim::index.G1(boot, clst)
}
}
plot(nc, boots.mat[1,], type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
for(i in 2:nrow(boots.mat))
{
lines(nc, boots.mat[i,], type = 'l', col=i)
}
return(boots.mat)
}
wss.plot(coords, nc=3:5) -> aa
aa
boxplot(aa)
wss.plot <- function(x, nc, boot.n = 5, boot.p = 0.8, seed = 123)
{
set.seed(seed)
fstat <- NULL
boots.mat <- matrix(NA, nrow = boot.n, ncol = length(nc))
for(b in 1:boot.n)
{
boot <- dplyr::sample_n(x, boot.p * nrow(x))
for(i in seq_along(nc))
{
clst <- e1071::cmeans(boot, centers = nc[i])$cluster
boots.mat[b,i] <- clusterSim::index.G1(boot, clst)
}
}
boxplot(boots.mat)
}
wss.plot(coords, nc=3:20, boot.n = 50) -> aa
library(clusterSim)
data(data_ratio)
md <- dist(data_ratio, method="euclidean")
# nc - number_of_clusters
min_nc=2
max_nc=20
res <- array(0,c(max_nc-min_nc+1,2))
res[,1] <- min_nc:max_nc
clusters <- NULL
for (nc in min_nc:max_nc)
{
cl2 <- pam(md, nc, diss=TRUE)
res[nc-min_nc+1,2] <- G1 <- index.G1(data_ratio,cl2$cluster,centrotypes="centroids")
clusters <- rbind(clusters, cl2$cluster)
}
print(paste("max G1 for",(min_nc:max_nc)[which.max(res[,2])],"clusters=",max(res[,2])))
print("clustering for max G1")
print(clusters[which.max(res[,2]),])
write.table(res,file="G1_res.csv",sep=";",dec=",",row.names=TRUE,col.names=FALSE)
plot(res, type="p", pch=0, xlab="Number of clusters", ylab="G1", xaxt="n")
axis(1, c(min_nc:max_nc))
data_ratio
pairs(data_ratio)
wss.plot(coords, nc=3:40, boot.n = 50) -> aa
pfstat_boot <- function(x, nc, boot.n = 5, boot.p = 0.7, seed = 123)
{
set.seed(seed)
fstat <- NULL
boots.mat <- matrix(NA, nrow = boot.n, ncol = length(nc))
for(b in 1:boot.n)
{
boot <- dplyr::sample_n(x, boot.p * nrow(x))
for(i in seq_along(nc))
{
clst <- e1071::cmeans(boot, centers = nc[i])$cluster
boots.mat[b,i] <- clusterSim::index.G1(boot, clst)
}
}
boxplot(boots.mat)
}
wss.plot(coords, nc=3:40, boot.n = 30) -> aa
wss.plot(coords, nc=9:16, boot.n = 60) -> aa
boxplot(aa)
head(aa)
pfstat_boot(coords, nc=9:16, boot.n = 60) -> aa
aa
boxplot(aa$stats, names = 9:16)
pfstat_boot <- function(x, nc, boot.n = 5, boot.p = 0.7, seed = 123)
{
set.seed(seed)
fstat <- NULL
boots.mat <- matrix(NA, nrow = boot.n, ncol = length(nc))
for(b in 1:boot.n)
{
boot <- dplyr::sample_n(x, boot.p * nrow(x))
for(i in seq_along(nc))
{
clst <- e1071::cmeans(boot, centers = nc[i])$cluster
boots.mat[b,i] <- clusterSim::index.G1(boot, clst)
}
}
boxplot(boots.mat, names = nc)
}
pfstat_boot(coords, nc=3:20, boot.n = 5) -> aa
head(coords)
clst <- e1071::cmeans(coords, centers = 13)
plotly::plot_ly(data = data.frame(labels = clst$cluster, coords),
x = ~X1, y = ~X2, type="scatter", mode = "markers" ,
color = ~as.factor(labels), marker = list(size = 1))
plotly::plot_ly(data = data.frame(labels = clst$cluster, coords),
x = ~X1, y = ~X2, type="scatter", mode = "markers" ,
color = ~as.factor(labels), marker = list(size = 5))
# import data
dat <- readr::read_csv("../data/clean_zNormalized_features.csv")
# perform dim reduction
embed_map <- largeVis::largeVis(t(dat), dim = 2)
coords <- data.frame(t(embed_map$coords))
plotly::plot_ly(data = data.frame(labels = clst$cluster, coords),
x = ~X1, y = ~X2, type="scatter", mode = "markers" ,
color = ~as.factor(labels), marker = list(size = 5))
embed_map <- largeVis::largeVis(t(dat[,-1]), dim = 2)
coords <- data.frame(t(embed_map$coords))
plotly::plot_ly(data = data.frame(labels = clst$cluster, coords),
x = ~X1, y = ~X2, type="scatter", mode = "markers" ,
color = ~as.factor(labels), marker = list(size = 5))
plotly::plot_ly(data = data.frame(labels = clst$cluster, coords),
x = ~X1, y = ~X2, type="scatter", mode = "markers" ,
color = ~as.factor(labels), marker = list(size = 1))
plotly::plot_ly(data = data.frame(labels = clst$cluster, coords),
x = ~X1, y = ~X2, type="scatter", mode = "markers" ,
marker = list(size = 1))
