boots.mat[b,i] <- clusterSim::index.G1(boot, clst)
}
}
boots.mat
boxplot(boots.mat, names = nc)
data.frame(boots.mat)
data.frame(boots.mat) %>% melt
data.frame(boots.mat) %>% reshape2::melt
data.frame(boots.mat) %>% reshape2::melt
data.frame(boots.mat) %>% reshape2::melt()
# import dependencies
suppressPackageStartupMessages({
require(tidyverse)
require(e1071)
require(plotly)
require(Rtsne)
require(largeVis)
require(RColorBrewer)
require(reshape2)
require(ggplot2)
})
data.frame(boots.mat) %>%
reshape2::melt(variable.name = 'Cluster', value.name = 'Fstat') %>%
group_by(Cluster) %>%
ggplot(aes(y = Fstat, x = Cluster)) +
geom_line()
data.frame(boots.mat) %>%
reshape2::melt(variable.name = 'Cluster', value.name = 'Fstat') %>%
group_by(Cluster)
data.frame(boots.mat) %>%
reshape2::melt(variable.name = 'Cluster', value.name = 'Fstat') %>%
group_by(Cluster) %>%
ggplot(aes(y = Fstat, x = Cluster)) +
geom_point()
data.frame(boots.mat) %>%
reshape2::melt(variable.name = 'Cluster', value.name = 'Fstat') %>%
group_by(Cluster) %>%
ggplot(aes(y = Fstat, x = as.integer(Cluster))) +
geom_line()
data.frame(boots.mat) %>%
reshape2::melt(variable.name = 'Cluster', value.name = 'Fstat') %>%
group_by(Cluster) %>%
ggplot(aes(y = Fstat, x = Cluster)) +
geom_point()
apply(boots.mat,2, median)
apply(boots.mat,2, median) %>% max()
apply(boots.mat,2, median) %>% which.max()
names(boots.mat) <- nc
boots.mat.plot <- data.frame(boots.mat) %>%
reshape2::melt(variable.name = 'Cluster', value.name = 'Fstat') %>%
group_by(Cluster) %>%
ggplot(aes(y = Fstat, x = Cluster)) +
geom_point()
names(boots.mat) <- nc
boots.mat
colnames(boots.mat) <- nc
boots.mat
nc
?rename
boots.mat.df <- boots.mat.df
colnames(boots.mat.df) <- nc
boots.mat.plot <- data.frame(boots.mat) %>%
reshape2::melt(variable.name = 'Cluster', value.name = 'Fstat') %>%
group_by(Cluster) %>%
ggplot(aes(y = Fstat, x = Cluster)) +
geom_point()
print(boots.mat.plot)
apply(boots.mat, 2, median) %>% which.max + 1
apply(boots.mat, 2, median) %>% which.max + 1
clust.opt <- which.max(apply(boots.mat, 2, median)) + 1
clust.opt
apply(boots.mat, 2, median)
apply(boots.mat, 2, median) %>% which.max
which.max(apply(boots.mat, 2, median))
boots.mat
boots.mat <- matrix(NA, nrow = boot.n, ncol = length(nc))
for(b in 1:boot.n)
{
boot <- dplyr::sample_n(x, boot.p * nrow(x))
for(i in seq_along(nc))
{
clst <- e1071::cmeans(boot, centers = nc[i])$cluster
boots.mat[b,i] <- clusterSim::index.G1(boot, clst)
}
}
which.max(apply(boots.mat, 2, median))
boots.mat.df <- boots.mat.df
colnames(boots.mat.df) <- nc
boots.mat.plot <- data.frame(boots.mat) %>%
reshape2::melt(variable.name = 'Cluster', value.name = 'Fstat') %>%
group_by(Cluster) %>%
ggplot(aes(y = Fstat, x = Cluster)) +
geom_point() +
geom_jitter() +
theme_bw()
print(boots.mat.plot)
data.frame(boots.mat) %>%
reshape2::melt(variable.name = 'Cluster', value.name = 'Fstat') %>%
group_by(Cluster) %>%
ggplot(aes(y = Fstat, x = Cluster)) +
geom_point() +
geom_jitter() +
geom_boxplot() +
theme_bw()
boots.mat.plot <- data.frame(boots.mat) %>%
reshape2::melt(variable.name = 'Cluster', value.name = 'Fstat') %>%
group_by(Cluster) %>%
ggplot(aes(y = Fstat, x = Cluster)) +
geom_point() +
geom_jitter(aes(colour = Cluster)) +
geom_boxplot() +
theme_bw()
print(boots.mat.plot)
boots.mat.df <- boots.mat.df
colnames(boots.mat.df) <- nc
boots.mat.plot <- data.frame(boots.mat) %>%
reshape2::melt(variable.name = 'Cluster', value.name = 'Fstat') %>%
group_by(Cluster) %>%
ggplot(aes(y = Fstat, x = Cluster)) +
geom_point() +
geom_jitter(aes(colour = Cluster)) +
geom_boxplot() +
theme_bw()
print(boots.mat.plot)
boots.mat.df
boots.mat.df
boots.mat.df
set.seed(seed)
fstat <- NULL
boots.mat <- matrix(NA, nrow = boot.n, ncol = length(nc))
for(b in 1:boot.n)
{
boot <- dplyr::sample_n(x, boot.p * nrow(x))
for(i in seq_along(nc))
{
clst <- e1071::cmeans(boot, centers = nc[i])$cluster
boots.mat[b,i] <- clusterSim::index.G1(boot, clst)
}
}
boots.mat.df <- boots.mat.df
colnames(boots.mat.df) <- nc
boots.mat.plot <- data.frame(boots.mat) %>%
reshape2::melt(variable.name = 'Cluster', value.name = 'Fstat') %>%
group_by(Cluster) %>%
ggplot(aes(y = Fstat, x = Cluster)) +
geom_point() +
geom_jitter(aes(colour = Cluster)) +
geom_boxplot() +
theme_bw()
print(boots.mat.plot)
boots.mat.df <- boots.mat.df
colnames(boots.mat.df) <- nc
boots.mat.plot <- data.frame(boots.mat.df) %>%
reshape2::melt(variable.name = 'Cluster', value.name = 'Fstat') %>%
group_by(Cluster) %>%
ggplot(aes(y = Fstat, x = Cluster)) +
geom_point() +
geom_jitter(aes(colour = Cluster)) +
geom_boxplot() +
theme_bw()
print(boots.mat.plot)
boots.mat.df
set.seed(seed)
fstat <- NULL
boots.mat <- matrix(NA, nrow = boot.n, ncol = length(nc))
for(b in 1:boot.n)
{
boot <- dplyr::sample_n(x, boot.p * nrow(x))
for(i in seq_along(nc))
{
clst <- e1071::cmeans(boot, centers = nc[i])$cluster
boots.mat[b,i] <- clusterSim::index.G1(boot, clst)
}
}
boots.mat.df <- boots.mat
colnames(boots.mat.df) <- nc
boots.mat.plot <- data.frame(boots.mat.df) %>%
reshape2::melt(variable.name = 'Cluster', value.name = 'Fstat') %>%
group_by(Cluster) %>%
ggplot(aes(y = Fstat, x = Cluster)) +
geom_point() +
geom_jitter(aes(colour = Cluster)) +
geom_boxplot() +
theme_bw()
print(boots.mat.plot)
boots.mat.plot <- data.frame(boots.mat.df) %>%
reshape2::melt(variable.name = 'Cluster', value.name = 'Fstat') %>%
group_by(Cluster) %>%
ggplot(aes(y = Fstat, x = Cluster)) +
geom_point() +
geom_jitter(aes(colour = Cluster, alpha = 0.8)) +
geom_boxplot() +
theme_bw()
print(boots.mat.plot)
pfstat_boot <- function(x, nc, boot.n = 5, boot.p = 0.7, seed = 123)
#****************************************************************
# Bootstrap pseudo-fstatistic for range of clusters k using
# cmeans - Fuzzy c-means (FCM) is a method of clustering which
# allows one piece of data to belong to two or more clusters.
#
# Inputs:
#   x:      data set
#   nc:     seq of clusters to iterate over
#   boot.n: number of bootstrap samples
#   boot.p: proportion of observations to sample on each boot
#   seed:   seed to replicate results
#
# Return:
#   stability plot of pseudo-F over each cluster assignment k
#****************************************************************
{
set.seed(seed)
fstat <- NULL
boots.mat <- matrix(NA, nrow = boot.n, ncol = length(nc))
for(b in 1:boot.n)
{
boot <- dplyr::sample_n(x, boot.p * nrow(x))
for(i in seq_along(nc))
{
clst <- e1071::cmeans(boot, centers = nc[i])$cluster
boots.mat[b,i] <- clusterSim::index.G1(boot, clst)
}
}
# boxplot
boots.mat.df <- boots.mat
colnames(boots.mat.df) <- nc
boots.mat.plot <- data.frame(boots.mat.df) %>%
reshape2::melt(variable.name = 'Cluster', value.name = 'Fstat') %>%
group_by(Cluster) %>%
ggplot(aes(y = Fstat, x = Cluster)) +
geom_point() +
geom_jitter(aes(colour = Cluster, alpha = 0.8)) +
geom_boxplot() +
theme_bw()
print(boots.mat.plot)
# optimal cluster assignment
clust.opt <- which.max(apply(boots.mat, 2, median)) + 1
return(clust.opt)
}
dimReduction <- function(x, dim = 2)
#****************************************************************
# Perform largeVis TSNE mapping to 2 or 3 dimensional space.
# Ref: https://arxiv.org/abs/1602.00370
#
# Inputs:
#   x:   data set
#   dim: dimension of map
#
# Return:
#   coordinates of lower dimensional map
#****************************************************************
{
# drop index column
dat <- dplyr::select(x, -id)
# perform dim reduction
embed_map <- largeVis::largeVis(t(dat), dim = 2)
coords <- data.frame(t(embed_map$coords))
return(coords)
}
opt.clst <- pfstat_boot(coords, nc = 2:3, boot.n = 2)
opt.clst <- pfstat_boot(coords, nc = 2:3, boot.n = 10)
opt.clst <- pfstat_boot(coords, nc = 2:3, boot.n = 20)
boots.mat.df <- boots.mat
colnames(boots.mat.df) <- nc
boots.mat.plot <- data.frame(boots.mat.df) %>%
reshape2::melt(variable.name = 'Cluster', value.name = 'Fstat') %>%
group_by(Cluster) %>%
ggplot(aes(y = Fstat, x = Cluster)) +
geom_point() +
geom_jitter(aes(colour = Cluster), alpha = 0.8) +
geom_boxplot() +
theme_bw()
print(boots.mat.plot)
boots.mat.df <- boots.mat
colnames(boots.mat.df) <- nc
boots.mat.plot <- data.frame(boots.mat.df) %>%
reshape2::melt(variable.name = 'Cluster', value.name = 'Fstat', id.vars = NULL) %>%
group_by(Cluster) %>%
ggplot(aes(y = Fstat, x = Cluster)) +
geom_point() +
geom_jitter(aes(colour = Cluster), alpha = 0.8) +
geom_boxplot() +
theme_bw()
print(boots.mat.plot)
pfstat_boot <- function(x, nc, boot.n = 5, boot.p = 0.7, seed = 123)
#****************************************************************
# Bootstrap pseudo-fstatistic for range of clusters k using
# cmeans - Fuzzy c-means (FCM) is a method of clustering which
# allows one piece of data to belong to two or more clusters.
#
# Inputs:
#   x:      data set
#   nc:     seq of clusters to iterate over
#   boot.n: number of bootstrap samples
#   boot.p: proportion of observations to sample on each boot
#   seed:   seed to replicate results
#
# Return:
#   stability plot of pseudo-F over each cluster assignment k
#****************************************************************
{
set.seed(seed)
fstat <- NULL
boots.mat <- matrix(NA, nrow = boot.n, ncol = length(nc))
for(b in 1:boot.n)
{
boot <- dplyr::sample_n(x, boot.p * nrow(x))
for(i in seq_along(nc))
{
clst <- e1071::cmeans(boot, centers = nc[i])$cluster
boots.mat[b,i] <- clusterSim::index.G1(boot, clst)
}
}
# boxplot
boots.mat.df <- boots.mat
colnames(boots.mat.df) <- nc
boots.mat.plot <- data.frame(boots.mat.df) %>%
reshape2::melt(variable.name = 'Cluster', value.name = 'Fstat', id.vars = NULL) %>%
group_by(Cluster) %>%
ggplot(aes(y = Fstat, x = Cluster)) +
geom_point() +
geom_jitter(aes(colour = Cluster), alpha = 0.8) +
geom_boxplot() +
theme_bw()
print(boots.mat.plot)
# optimal cluster assignment
clust.opt <- which.max(apply(boots.mat, 2, median)) + 1
return(clust.opt)
}
dimReduction <- function(x, dim = 2)
#****************************************************************
# Perform largeVis TSNE mapping to 2 or 3 dimensional space.
# Ref: https://arxiv.org/abs/1602.00370
#
# Inputs:
#   x:   data set
#   dim: dimension of map
#
# Return:
#   coordinates of lower dimensional map
#****************************************************************
{
# drop index column
dat <- dplyr::select(x, -id)
# perform dim reduction
embed_map <- largeVis::largeVis(t(dat), dim = 2)
coords <- data.frame(t(embed_map$coords))
return(coords)
}
opt.clst <- pfstat_boot(coords, nc = 2:3, boot.n = 20)
opt.clst <- pfstat_boot(coords, nc = 2:5, boot.n = 50)
pfstat_boot <- function(x, nc, boot.n = 5, boot.p = 0.7, seed = 123)
#****************************************************************
# Bootstrap pseudo-fstatistic for range of clusters k using
# cmeans - Fuzzy c-means (FCM) is a method of clustering which
# allows one piece of data to belong to two or more clusters.
#
# Inputs:
#   x:      data set
#   nc:     seq of clusters to iterate over
#   boot.n: number of bootstrap samples
#   boot.p: proportion of observations to sample on each boot
#   seed:   seed to replicate results
#
# Return:
#   stability plot of pseudo-F over each cluster assignment k
#****************************************************************
{
set.seed(seed)
fstat <- NULL
boots.mat <- matrix(NA, nrow = boot.n, ncol = length(nc))
for(b in 1:boot.n)
{
boot <- dplyr::sample_n(x, boot.p * nrow(x))
for(i in seq_along(nc))
{
clst <- e1071::cmeans(boot, centers = nc[i])$cluster
boots.mat[b,i] <- clusterSim::index.G1(boot, clst)
}
}
# boxplot
boots.mat.df <- boots.mat
colnames(boots.mat.df) <- nc
boots.mat.plot <- data.frame(boots.mat.df) %>%
reshape2::melt(variable.name = 'Cluster', value.name = 'Fstat', id.vars = NULL) %>%
group_by(Cluster) %>%
ggplot(aes(y = Fstat, x = Cluster)) +
geom_point() +
geom_jitter(aes(colour = Cluster), alpha = 0.6) +
geom_boxplot() +
theme_bw()
print(boots.mat.plot)
# optimal cluster assignment
clust.opt <- which.max(apply(boots.mat, 2, median)) + 1
return(clust.opt)
}
plotly::plot_ly(data = data.frame(coords),
x = ~X1, y = ~X2, type="scatter", mode = "markers" ,
marker = list(size = 1))
coords <- dimReduction(dat, dim = 3)
library(scatterplot3d)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 300)
coords
dimReduction <- function(x, dim = 2)
#****************************************************************
# Perform largeVis TSNE mapping to 2 or 3 dimensional space.
# Ref: https://arxiv.org/abs/1602.00370
#
# Inputs:
#   x:   data set
#   dim: dimension of map
#
# Return:
#   coordinates of lower dimensional map
#****************************************************************
{
# drop index column
dat <- dplyr::select(x, -id)
# perform dim reduction
embed_map <- largeVis::largeVis(t(dat), dim = dim)
coords <- data.frame(t(embed_map$coords))
return(coords)
}
plotly::plot_ly(data = data.frame(coords),
x = ~X1, y = ~X2, type="scatter", mode = "markers" ,
marker = list(size = 1))
coords <- dimReduction(dat, dim = 3)
head(coords)
library(scatterplot3d)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 300)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 90)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 50)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 10)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 180)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 200)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 250)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 300)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 275)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 350)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 0)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 25)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 35)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 45)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 55)
write_csv(coords, "../outputs/minmax_mapped_3d.csv")
coords <- dimReduction(dat, dim = 2)
write_csv(coords, "../outputs/minmax_mapped_2d.csv")
View(coords)
View(dat)
dat <- readr::read_csv("../outputs/clean_zNormalized_features.csv")
coords <- dimReduction(dat, dim = 2)
write_csv(coords, "../outputs/z_mapped_2d.csv")
plotly::plot_ly(data = data.frame(coords),
x = ~X1, y = ~X2, type="scatter", mode = "markers" ,
marker = list(size = 1))
coords <- dimReduction(dat, dim = 3)
write_csv(coords, "../outputs/z_mapped_3d.csv")
library(scatterplot3d)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 55)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 0)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 20)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 50)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 80)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 90)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 120)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 180)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 200)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 220)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 260)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 300)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 310)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 320)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 340)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 360)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 360)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 0)
scatterplot3d(x = coords[,1], y = coords[,2], z = coords[,3], pch=".",
cex.symbols=0.1, angle = 180)
